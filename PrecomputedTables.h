#ifndef PRECOMPUTED_TABLES_H
#define PRECOMPUTED_TABLES_H

#include <cstdint>

// Pre-computed Montgomery parameters for secp256k1
namespace PrecomputedSecp256k1 {

// Prime P = 2^256 - 2^32 - 977
constexpr uint64_t FIELD_P[4] = {
    0xFFFFFFFEFFFFFC2FULL, 0xFFFFFFFFFFFFFFFFULL,
    0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL
};

// Montgomery R = 2^256 mod P
constexpr uint64_t MONT_R[4] = {
    0x00000001000003D1ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL
};

// Montgomery R^2 mod P (for conversion to Montgomery form)
constexpr uint64_t MONT_R2[4] = {
    0x9D671CD581C69BC5ULL, 0xE697F5E45BCD07C6ULL,
    0x741496C20E7CF878ULL, 0x896CF21467D7D140ULL
};

// Montgomery inverse of P mod 2^64
constexpr uint64_t MONT_INV_P = 0xD838091DD2253531ULL;

// Order n of the generator point
constexpr uint64_t ORDER_N[4] = {
    0xBFD25E8CD0364141ULL, 0xBAAEDCE6AF48A03BULL,
    0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL
};

// Generator point G
constexpr uint64_t GENERATOR_X[4] = {
    0x59F2815B16F81798ULL, 0x029BFCDB2DCE28D9ULL,
    0x55A06295CE870B07ULL, 0x79BE667EF9DCBBACULL
};

constexpr uint64_t GENERATOR_Y[4] = {
    0x9C47D08FFB10D4B8ULL, 0xFD17B448A6855419ULL,
    0x5DA4FBFC0E1108A8ULL, 0x483ADA7726A3C465ULL
};

// Pre-computed small multiples of G (first 16 multiples)
// These values are regenerated via libsecp256k1 to guarantee accuracy
// Format: [multiple][coordinate: 0=x, 1=y][uint64 index]

constexpr uint64_t MULT_1G_X[4] = {
    0x59F2815B16F81798ULL, 0x029BFCDB2DCE28D9ULL,
    0x55A06295CE870B07ULL, 0x79BE667EF9DCBBACULL
};
constexpr uint64_t MULT_1G_Y[4] = {
    0x9C47D08FFB10D4B8ULL, 0xFD17B448A6855419ULL,
    0x5DA4FBFC0E1108A8ULL, 0x483ADA7726A3C465ULL
};

constexpr uint64_t MULT_2G_X[4] = {
    0xABAC09B95C709EE5ULL, 0x5C778E4B8CEF3CA7ULL,
    0x3045406E95C07CD8ULL, 0xC6047F9441ED7D6DULL
};
constexpr uint64_t MULT_2G_Y[4] = {
    0x236431A950CFE52AULL, 0xF7F632653266D0E1ULL,
    0xA3C58419466CEAEEULL, 0x1AE168FEA63DC339ULL
};

constexpr uint64_t MULT_3G_X[4] = {
    0x8601F113BCE036F9ULL, 0xB531C845836F99B0ULL,
    0x49344F85F89D5229ULL, 0xF9308A019258C310ULL
};
constexpr uint64_t MULT_3G_Y[4] = {
    0x6CB9FD7584B8E672ULL, 0x6500A99934C2231BULL,
    0x0FE337E62A37F356ULL, 0x388F7B0F632DE814ULL
};

constexpr uint64_t MULT_4G_X[4] = {
    0x74FA94ABE8C4CD13ULL, 0xCC6C13900EE07584ULL,
    0x581E4904930B1404ULL, 0xE493DBF1C10D80F3ULL
};
constexpr uint64_t MULT_4G_Y[4] = {
    0xCFE97BDC47739922ULL, 0xD967AE33BFBDFE40ULL,
    0x5642E2098EA51448ULL, 0x51ED993EA0D455B7ULL
};

constexpr uint64_t MULT_5G_X[4] = {
    0xCBA8D569B240EFE4ULL, 0xE88B84BDDC619AB7ULL,
    0x55B4A7250A5C5128ULL, 0x2F8BDE4D1A072093ULL
};
constexpr uint64_t MULT_5G_Y[4] = {
    0xDCA87D3AA6AC62D6ULL, 0xF788271BAB0D6840ULL,
    0xD4DBA9DDA6C9C426ULL, 0xD8AC222636E5E3D6ULL
};

constexpr uint64_t MULT_6G_X[4] = {
    0x2F057A1460297556ULL, 0x82F6472F8568A18BULL,
    0x20453A14355235D3ULL, 0xFFF97BD5755EEEA4ULL
};
constexpr uint64_t MULT_6G_Y[4] = {
    0x3C870C36B075F297ULL, 0xDE80F0F6518FE4A0ULL,
    0xF3BE96017F45C560ULL, 0xAE12777AACFBB620ULL
};

constexpr uint64_t MULT_7G_X[4] = {
    0xE92BDDEDCAC4F9BCULL, 0x3D419B7E0330E39CULL,
    0xA398F365F2EA7A0EULL, 0x5CBDF0646E5DB4EAULL
};
constexpr uint64_t MULT_7G_Y[4] = {
    0xA5082628087264DAULL, 0xA813D0B813FDE7B5ULL,
    0xA3178D6D861A54DBULL, 0x6AEBCA40BA255960ULL
};

constexpr uint64_t MULT_8G_X[4] = {
    0x67784EF3E10A2A01ULL, 0x0A1BDD05E5AF888AULL,
    0xAFF3843FB70F3C2FULL, 0x2F01E5E15CCA351DULL
};
constexpr uint64_t MULT_8G_Y[4] = {
    0xB5DA2CB76CBDE904ULL, 0xC2E213D6BA5B7617ULL,
    0x293D082A132D13B4ULL, 0x5C4DA8A741539949ULL
};

constexpr uint64_t MULT_9G_X[4] = {
    0xC35F110DFC27CCBEULL, 0xE09796974C57E714ULL,
    0x09AD178A9F559ABDULL, 0xACD484E2F0C7F653ULL
};
constexpr uint64_t MULT_9G_Y[4] = {
    0x05CC262AC64F9C37ULL, 0xADD888A4375F8E0FULL,
    0x64380971763B61E9ULL, 0xCC338921B0A7D9FDULL
};

constexpr uint64_t MULT_10G_X[4] = {
    0x52A68E2A47E247C7ULL, 0x3442D49B1943C2B7ULL,
    0x35477C7B1AE6AE5DULL, 0xA0434D9E47F3C862ULL
};
constexpr uint64_t MULT_10G_Y[4] = {
    0x3CBEE53B037368D7ULL, 0x6F794C2ED877A159ULL,
    0xA3B6C7E693A24C69ULL, 0x893ABA425419BC27ULL
};

constexpr uint64_t MULT_11G_X[4] = {
    0xBBEC17895DA008CBULL, 0x5649980BE5C17891ULL,
    0x5EF4246B70C65AACULL, 0x774AE7F858A9411EULL
};
constexpr uint64_t MULT_11G_Y[4] = {
    0x301D74C9C953C61BULL, 0x372DB1E2DFF9D6A8ULL,
    0x0243DD56D7B7B365ULL, 0xD984A032EB6B5E19ULL
};

constexpr uint64_t MULT_12G_X[4] = {
    0xC5B0F47070AFE85AULL, 0x687CF4419620095BULL,
    0x15C38F004D734633ULL, 0xD01115D548E7561BULL
};
constexpr uint64_t MULT_12G_Y[4] = {
    0x6B051B13F4062327ULL, 0x79238C5DD9A86D52ULL,
    0xA8B64537E17BD815ULL, 0xA9F34FFDC815E0D7ULL
};

constexpr uint64_t MULT_13G_X[4] = {
    0xDEEDDF8F19405AA8ULL, 0xB075FBC6610E58CDULL,
    0xC7D1D205C3748651ULL, 0xF28773C2D975288BULL
};
constexpr uint64_t MULT_13G_Y[4] = {
    0x29B5CB52DB03ED81ULL, 0x3A1A06DA521FA91FULL,
    0x758212EB65CDAF47ULL, 0x0AB0902E8D880A89ULL
};

constexpr uint64_t MULT_14G_X[4] = {
    0xE49B241A60E823E4ULL, 0x26AA7B63678949E6ULL,
    0xFD64E67F07D38E32ULL, 0x499FDF9E895E719CULL
};
constexpr uint64_t MULT_14G_Y[4] = {
    0xC65F40D403A13F5BULL, 0x464279C27A3F95BCULL,
    0x90F044E4A7B3D464ULL, 0xCAC2F6C4B54E8551ULL
};

constexpr uint64_t MULT_15G_X[4] = {
    0x44ADBCF8E27E080EULL, 0x31E5946F3C85F79EULL,
    0x5A465AE3095FF411ULL, 0xD7924D4F7D43EA96ULL
};
constexpr uint64_t MULT_15G_Y[4] = {
    0xC504DC9FF6A26B58ULL, 0xEA40AF2BD896D3A5ULL,
    0x83842EC228CC6DEFULL, 0x581E2872A86C72A6ULL
};

constexpr uint64_t MULT_16G_X[4] = {
    0xC44EE89E2A6DEC0AULL, 0xB2A31369B87A5AE9ULL,
    0x3011AABC21C23E97ULL, 0xE60FCE93B59E9EC5ULL
};
constexpr uint64_t MULT_16G_Y[4] = {
    0xE1F32CCE69616821ULL, 0x1296891E44D23F0BULL,
    0x9DB99F34F5793710ULL, 0xF7E3507399E59592ULL
};

// Struct to hold a pre-computed point
struct PrecomputedPoint {
    const uint64_t* x;
    const uint64_t* y;
};

// Array of pre-computed points for easy access
constexpr PrecomputedPoint GENERATOR_MULTIPLES[16] = {
    {MULT_1G_X, MULT_1G_Y},
    {MULT_2G_X, MULT_2G_Y},
    {MULT_3G_X, MULT_3G_Y},
    {MULT_4G_X, MULT_4G_Y},
    {MULT_5G_X, MULT_5G_Y},
    {MULT_6G_X, MULT_6G_Y},
    {MULT_7G_X, MULT_7G_Y},
    {MULT_8G_X, MULT_8G_Y},
    {MULT_9G_X, MULT_9G_Y},
    {MULT_10G_X, MULT_10G_Y},
    {MULT_11G_X, MULT_11G_Y},
    {MULT_12G_X, MULT_12G_Y},
    {MULT_13G_X, MULT_13G_Y},
    {MULT_14G_X, MULT_14G_Y},
    {MULT_15G_X, MULT_15G_Y},
    {MULT_16G_X, MULT_16G_Y}
};

// Lambda and beta parameters for GLV endomorphism on secp256k1
constexpr uint64_t LAMBDA[4] = {
    0xDF02967C1B23BD72ULL, 0x122E22EA20816678ULL,
    0xA5261C028812645AULL, 0x5363AD4CC05C30E0ULL
};

constexpr uint64_t BETA[4] = {
    0xC1396C28719501EEULL, 0x9CF0497512F58995ULL,
    0x6E64479EAC3434E9ULL, 0x7AE96A2B657C0710ULL
};

// Pre-computed 2^n * G for fast scalar multiplication
// These are powers of 2 multiples: 2^8*G, 2^16*G, 2^24*G, etc.
// Used for efficient window-based scalar multiplication

// 2^8*G (256*G)
constexpr uint64_t POW2_8G_X[4] = {
    0x0646E23FD5F51508ULL, 0xD8C39CABD5AC1CA1ULL,
    0xEA2A6E3E172DE238ULL, 0x8282263212C609D9ULL
};
constexpr uint64_t POW2_8G_Y[4] = {
    0xD31B6EAFF6E26CAFULL, 0x62D613AC2F7B17BEULL,
    0x5E8256E830B60ACEULL, 0x11F8A8098557DFE4ULL
};

// 2^16*G (65536*G)
constexpr uint64_t POW2_16G_X[4] = {
    0x526BAD8F83FF4640ULL, 0x53441C7E55552FFEULL,
    0x99CEAC05B6262EE0ULL, 0x363D90D447B00C9CULL
};
constexpr uint64_t POW2_16G_Y[4] = {
    0x62003C7F3BEE9DE9ULL, 0x45B9A89008199ECBULL,
    0x953B445397F33631ULL, 0x04E273ADFC732221ULL
};

// 2^24*G 
constexpr uint64_t POW2_24G_X[4] = {
    0xCB6115925232FCDAULL, 0xB700DBFFA6C0E77BULL,
    0x6BF771C00BD548C7ULL, 0x723CBAA6E5DB996DULL
};
constexpr uint64_t POW2_24G_Y[4] = {
    0x01DC069D9EB39F5FULL, 0x2660A06537794948ULL,
    0xA921137488824D6EULL, 0x96E867B5595CC498ULL
};

// 2^32*G
constexpr uint64_t POW2_32G_X[4] = {
    0x3AD457AB55456B7DULL, 0xDA72FD66B6966693ULL,
    0xA49CA69F6E94F16FULL, 0x7BF7D5CE4F153822ULL
};
constexpr uint64_t POW2_32G_Y[4] = {
    0xB0B01A547684845AULL, 0xF96C29CDA529A971ULL,
    0x11DEB3394FEA8F39ULL, 0x5A789A73494A8B5AULL
};

} // namespace PrecomputedSecp256k1

#endif // PRECOMPUTED_TABLES_H